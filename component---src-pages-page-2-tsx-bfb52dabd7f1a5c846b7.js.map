{"version":3,"sources":["webpack:///./src/pages/page-2.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx"],"names":["__webpack_require__","r","__webpack_exports__","gatsby__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","SecondPage","a","createElement","title","to","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","loader","enqueue","React","createContext","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_3090653587_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","oc","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Layout","children","_755544856","Fragment","header","paddingTop","Date","getFullYear","href"],"mappings":"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","file":"component---src-pages-page-2-tsx-bfb52dabd7f1a5c846b7.js","sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SecondPage: React.FC = () => (\n  <Layout>\n    <SEO title=\"Page two\" />\n    <h1>Hi from the second page</h1>\n    <p>Welcome to page 2</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default SecondPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { oc } from \"ts-optchain\"\nimport { SiteMetadataQueryQuery } from \"../graphqlTypes\"\n\ntype MetaProps = JSX.IntrinsicElements[\"meta\"]\n\ninterface Props {\n  description?: string\n  lang?: string\n  meta?: MetaProps[]\n  title: string\n}\n\nconst SEO: React.FC<Props> = ({ description, lang, meta, title }) => {\n  const { site }: SiteMetadataQueryQuery = useStaticQuery(\n    graphql`\n      query SiteMetadataQuery {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || oc(site).siteMetadata.description(\"\")\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${oc(site).siteMetadata.title(\"\")}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: oc(site).siteMetadata.author(\"\"),\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        // @ts-ignore\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport React from \"react\"\n\ninterface Props {\n  siteTitle?: string\n}\n\nconst Header: React.FC<Props> = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React, { ReactNode } from \"react\"\nimport { oc } from \"ts-optchain\"\nimport { SiteTitleQueryQuery } from \"../graphqlTypes\"\nimport Header from \"./header\"\nimport \"./layout.css\"\n\ninterface Props {\n  children: ReactNode\n}\n\nconst useSiteTitle = () => {\n  const data: SiteTitleQueryQuery = useStaticQuery(\n    graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `\n  )\n  return oc(data).site.siteMetadata.title(\"\")\n}\n\nconst Layout: React.FC<Props> = ({ children }) => {\n  const title = useSiteTitle()\n\n  return (\n    <>\n      <Header siteTitle={title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n"],"sourceRoot":""}